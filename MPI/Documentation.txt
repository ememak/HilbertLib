General notes:
coord_t currently is alias of unsigned int
hilbert_t currently is alias of double (this have to be a variable with great range, >((2^BitsPrecision)^Dimensions); precision isn't as necessary)
concidering range of double, max dimension in which library would work now is 1024/BitsPrecision rounded down, with max precision now it's 32
changing hilbert_t to array of ints concidered as bignum, this limits would be off, but with cost of speed
BitsPrecision cannot be more than 31 (generally size of coord_t in bits - 1)
there can be some memory leaks, but they are not huge

optimalization notes:
most time during partition (on low number of processes) is spent in GetHCoordinate, second place in qsort comparator, any optimalizations there would be very useful

	HilbertLib.h:

void HilbertLibPartition (coord_t * MyPoints, int MyPointsCount, int RootRank, int Dimensions,
			  int BitsPrecision, int rank, int size, double * oldPoints, 
			  coord_t * oldIdx, double * *NewDataPtr, coord_t * *NewDataIdx,
			  int *NewDataSize)
Function takes MyPointsCount points with coordinates changed by allToGrid (MyPoints), original coordinates and indexes of these points (oldPoints, oldIdx).
Output is points after load balancing - NewDataSize points with coordinates in NewDataPtr and indexes in NewDataIdx.
Points in oldPoints and NewDataPtr are stored as array of doubles, which first Dimensions doubles are coordinates of first point, next Dimensions doubles are coordinates of second point and so on.
In the middle of function there is array of boundaries (containing size hilpos_t), in there are informations about pieces of curve which belong to each process, boundaries[i] is hilbert coordinate of last point belonging to process i. This array would be important when rewritting query functions.
Function need to be launched by all processes.

in HilbertLib.h next are query related functions, they are too slow and should be rewritten (algorithm behind it is bad), but they work

MTNode *HilbertLibPrepareNodeForQueries (coord_t * Data, int DataSize, int Dimensions)
Function takes DataSize points in grid coordinates, returned by allToGrid (Data), and number of Dimensions.
Function returns pointer to tree used in other query functions.
This function have to be called before any other query function, becouse pointer to tree is needed there.
Every process should have it's own tree and root to it.

void answerPointQuery (int QuerySender, int Dimensions, coord_t * Data, int DataSize, 
		    MTNode * Root, int MyRank, double* data, int * dataIdx,
		    coord_t ** *SelfQueryResult, int *SelfQueryResultCount,
		    coord_t* LD, coord_t* RD)
Function asks all processes about points in space limited by <LD[i], RD[i]> in any dimension.
Function takes rank of process which asks query, points of each process, number of this points, root to tree returned by HilbertLibPrepareNodeForQueries, rank of calling process and double data of points owned by this process.
Output is SelfQueryResult which contains data of all points found by query on this process, number of this point is in SelfQuryResultCount.
Function need to be launched by all processes.
Only QuerySender process need to have query limits in LD and RD, rest of processes should have there empty arrays of Dimension coord_t.

void
recvPointQuery	(double * *NewNeighbours, int * *NewNeighboursIdx, int *NewNeighboursSize,
		double * *Results, int * *ResultsIdx, int *ResultsSize,
		int Dimensions, int ProcessCount, double * data, int * dataIdx,
		coord_t ** SelfQueryResult, int SelfQueryResultCount, int MyRank)
Function takes number of Dimensions, size of communication, local data and global indexes of local points, SelfQueryResult and SelfQueryResultCount outputed by answerPointQuery and rank in communication of process calling function.
Output is NewNeighbours, NewNeighboursIdx and NewNeighboursSize - points from other processes that match query criteria, and Results, ResultsIdx, ResultsSize - all points inside query range.
Only QuerySender from previous call of answerPointQuery should call this function.

void answerProcessQuery (int QuerySender, int Dimensions, MTNode * Root, int MyRank,
		int ** Processes, int * ProcessesCount, coord_t* LD, coord_t* RD);
Function asks all processes about processes that have points in space limited by <LD[i], RD[i]> in any dimension.
Function takes rank of process which asks query, root to tree returned by HilbertLibPrepareNodeForQueries, rank of calling process.
Output is Processes array, with informations about ranks of processes that match the criteria and number of such processes.
Processes array have to be not allocated before this function call (NULL or freed or never allocated)
Function need to be launched by all processes.
Only QuerySender process need to have query limits in LD and RD, rest of processes should have there empty arrays of Dimension coord_t.

	toGrid.h:

Grid made by functions in this file works on each coordinate independently.
Mapping change set of possible values in such way:
<min, max> -> <0, 1) -> {0, 1, 2, ..., (2^BitsPrecision)-1}
Error of this mapping is about (max-min)/(2^BitsPrecision) on every dimension

void allToGrid	(double* in, double* mind, double* maxd, coord_t** out, int PointsCount,
		int Dimensions, int BitsPrecision)
Function takes PointsCount points stored as array of doubles (in), which first Dimensions doubles are coordinates of first point, next Dimensions doubles are coordinates of second point and so on.
Mind and Maxd are global min and max on each coordinate, returned by getMinMax function or both could be NULL, getMinMax will be called inside this function then.
Output is PointsCount points on grid, stored as Dimensions+1 coord_t each, first is local index, next Dimensions are coordinates on each dimension.
BitsPrecision is a precision of curve, on each dimension there will be 2^BitsPrecision grid points.
out have to be not allocated before function call (NULL or freed or never allocated)

void getMinMax	(double* in, int PointsCount, double** mind, double** maxd, int Dimensions)
Function takes PointsCount points with coordinates changed by allToGrid (MyPoints), original coordinates and indexes of these points (oldPoints, oldIdx).
Output is mind and maxd, global minimum and maximum over all points stored by all processes (on each dimension).

void toPos(coord_t* in, double* out, double* mind, double* maxd, int Dimensions, int BitsPrecision)
Function takes one point with grid coordinates (only coordinates, without index!).
Output is double coordinates of this point.

void toGrid(double* in, coord_t* out, double* mind, double* maxd, int Dimensions, int BitsPrecision)
Function takes one point with double coordinates.
Output is grid coordinates of this point.

	AxesTranspose.h:

hilpos_t GetHCoordinate (coord_t * Z, coord_t * X, coord_t * Y, int b, int n)
b - BitsPrecision, n - Dimensions
Function takes point Z as input (with grid coordinates!) and two arrays of size n both (nobody cares what is inside them, they are overwritten).
Function returns a number of point on hilbert curve with precision b.
This function is very important and takes many time, because it have to be computed for every point separately, any optimalizations would be good, especially in first loop.

	PtrVector.h
Helper structure similar to std::vector, not very important part of library; it is used to contain pointers to data, not data itself

struct PtrVector
{
	void **arr;
	int capacity;
	int size;
};

void makePtrVector (PtrVector * vec)
need to be called before any other function including this PtrVector

void PtrVectorPB (PtrVector * vec, void * el)
Push back to end of vector vec pointer el

void PtrVectorDeallocate (PtrVector * vec)
deallocate vector and clean arr pointer, but not clean any data pointed by pointers inside arr

	MyTree.h

struct MTNode
{
	int dim;
	coord_t val;
	void *left, *right;
};
This tree is at each node dividing points into left if coordinate in dimension dim is lower than value val.
If node is leaf, in left pointer data is stored and val means then size of this data; right pointer is then NULL.
Tree stores pointers to points represented by grid coordinates.

void makeMTNode (MTNode * foo, int dimdiv, coord_t val)
Have to be called after declaration of a node; sets val to val and dimdiv to dim.

void MTmake (MTNode * Node, coord_t * *Data, int DataSize, int Dimensions, int ActDim)
Builds a tree containing data stored in Data. Dimensions is number of all dimensions, ActDim is dim value set to Node.

void MTQuery (MTNode * Node, coord_t * LD, coord_t * RD, coord_t ** *Res, int *ResSize, int Dimensions)
void MTQuery2 (MTNode * Node, coord_t * LD, coord_t * RD, int *Res, int Dimensions)
Very similar functions, asking subtree of Node about points in range <LD[i], RD[i]> on every dimension.
First function outputs array of pointers Res, with size ResSize.
Second function outputs int Res, with value 0 or 1, 0 means no points have been found, 1 means at least one point have been found.
Both functions used in queries, first in point query, second in process query.

void MTDelete (MTNode * Node)
Deletes tree Node and recursively delete all Node's subtree.
Don't free pointers stored in leaf->left, bu free leaf->left.
